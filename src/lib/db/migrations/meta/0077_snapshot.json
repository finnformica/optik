{
  "id": "1883e0f6-9131-4377-92bd-e4a8c7cbb258",
  "prevId": "5c97d715-8b56-4d3d-af4d-2e9ed48ba333",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.dim_account": {
      "name": "dim_account",
      "schema": "",
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "account_name": {
          "name": "account_name",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false,
          "default": "'Primary Account'"
        },
        "account_type": {
          "name": "account_type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false,
          "default": "'INDIVIDUAL'"
        },
        "currency": {
          "name": "currency",
          "type": "varchar(3)",
          "primaryKey": false,
          "notNull": false,
          "default": "'USD'"
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "dim_account_user_id_dim_user_id_fk": {
          "name": "dim_account_user_id_dim_user_id_fk",
          "tableFrom": "dim_account",
          "tableTo": "dim_user",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "users_own_accounts": {
          "name": "users_own_accounts",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\"dim_account\".\"user_id\" = current_setting('app.current_user_id')::int"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_account_access_token": {
      "name": "dim_account_access_token",
      "schema": "",
      "columns": {
        "access_token_key": {
          "name": "access_token_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "encrypted_tokens": {
          "name": "encrypted_tokens",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "token_type": {
          "name": "token_type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "scope": {
          "name": "scope",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "broker_code": {
          "name": "broker_code",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "dim_account_access_token_account_key_dim_account_account_key_fk": {
          "name": "dim_account_access_token_account_key_dim_account_account_key_fk",
          "tableFrom": "dim_account_access_token",
          "tableTo": "dim_account",
          "columnsFrom": [
            "account_key"
          ],
          "columnsTo": [
            "account_key"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "dim_account_access_token_broker_code_dim_broker_broker_code_fk": {
          "name": "dim_account_access_token_broker_code_dim_broker_broker_code_fk",
          "tableFrom": "dim_account_access_token",
          "tableTo": "dim_broker",
          "columnsFrom": [
            "broker_code"
          ],
          "columnsTo": [
            "broker_code"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_account_broker_token": {
          "name": "unique_account_broker_token",
          "nullsNotDistinct": false,
          "columns": [
            "account_key",
            "broker_code"
          ]
        }
      },
      "policies": {
        "users_own_account_tokens": {
          "name": "users_own_account_tokens",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\"dim_account_access_token\".\"account_key\" IN (\n        SELECT account_key FROM dim_account\n        WHERE user_id = current_setting('app.current_user_id')::int\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_broker": {
      "name": "dim_broker",
      "schema": "",
      "columns": {
        "broker_key": {
          "name": "broker_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "broker_code": {
          "name": "broker_code",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "broker_name": {
          "name": "broker_name",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false
        },
        "commission_structure": {
          "name": "commission_structure",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false
        },
        "api_provider": {
          "name": "api_provider",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "dim_broker_broker_code_unique": {
          "name": "dim_broker_broker_code_unique",
          "nullsNotDistinct": false,
          "columns": [
            "broker_code"
          ]
        }
      },
      "policies": {
        "authenticated_can_read_brokers": {
          "name": "authenticated_can_read_brokers",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_broker_account": {
      "name": "dim_broker_account",
      "schema": "",
      "columns": {
        "broker_account_key": {
          "name": "broker_account_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "broker_key": {
          "name": "broker_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "broker_account_number": {
          "name": "broker_account_number",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "broker_account_hash": {
          "name": "broker_account_hash",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": true
        },
        "broker_account_type": {
          "name": "broker_account_type",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "last_synced_at": {
          "name": "last_synced_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_broker_account_account_broker": {
          "name": "idx_broker_account_account_broker",
          "columns": [
            {
              "expression": "account_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "broker_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_broker_account_hash": {
          "name": "idx_broker_account_hash",
          "columns": [
            {
              "expression": "broker_account_hash",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "dim_broker_account_account_key_dim_account_account_key_fk": {
          "name": "dim_broker_account_account_key_dim_account_account_key_fk",
          "tableFrom": "dim_broker_account",
          "tableTo": "dim_account",
          "columnsFrom": [
            "account_key"
          ],
          "columnsTo": [
            "account_key"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "dim_broker_account_broker_key_dim_broker_broker_key_fk": {
          "name": "dim_broker_account_broker_key_dim_broker_broker_key_fk",
          "tableFrom": "dim_broker_account",
          "tableTo": "dim_broker",
          "columnsFrom": [
            "broker_key"
          ],
          "columnsTo": [
            "broker_key"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_broker_account": {
          "name": "unique_broker_account",
          "nullsNotDistinct": false,
          "columns": [
            "account_key",
            "broker_key",
            "broker_account_number"
          ]
        }
      },
      "policies": {
        "users_own_broker_accounts": {
          "name": "users_own_broker_accounts",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\"dim_broker_account\".\"account_key\" IN (\n        SELECT account_key FROM dim_account\n        WHERE user_id = current_setting('app.current_user_id')::int\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_date": {
      "name": "dim_date",
      "schema": "",
      "columns": {
        "date_key": {
          "name": "date_key",
          "type": "integer",
          "primaryKey": true,
          "notNull": true
        },
        "full_date": {
          "name": "full_date",
          "type": "date",
          "primaryKey": false,
          "notNull": true
        },
        "day_of_week": {
          "name": "day_of_week",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "day_of_month": {
          "name": "day_of_month",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "week_of_year": {
          "name": "week_of_year",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "month_name": {
          "name": "month_name",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "month_number": {
          "name": "month_number",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "quarter": {
          "name": "quarter",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "year": {
          "name": "year",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "is_weekend": {
          "name": "is_weekend",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "is_trading_day": {
          "name": "is_trading_day",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "week_ending_date": {
          "name": "week_ending_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "week_starting_date": {
          "name": "week_starting_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "month_ending_date": {
          "name": "month_ending_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_dim_date_full_date": {
          "name": "idx_dim_date_full_date",
          "columns": [
            {
              "expression": "full_date",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_dim_date_year_month": {
          "name": "idx_dim_date_year_month",
          "columns": [
            {
              "expression": "year",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "month_number",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "dim_date_full_date_unique": {
          "name": "dim_date_full_date_unique",
          "nullsNotDistinct": false,
          "columns": [
            "full_date"
          ]
        }
      },
      "policies": {
        "authenticated_can_read_dates": {
          "name": "authenticated_can_read_dates",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_security": {
      "name": "dim_security",
      "schema": "",
      "columns": {
        "security_key": {
          "name": "security_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "symbol": {
          "name": "symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "security_type": {
          "name": "security_type",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "option_type": {
          "name": "option_type",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "strike_price": {
          "name": "strike_price",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "security_name": {
          "name": "security_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "underlying_symbol": {
          "name": "underlying_symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_dim_security_underlying": {
          "name": "idx_dim_security_underlying",
          "columns": [
            {
              "expression": "underlying_symbol",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_dim_security_type": {
          "name": "idx_dim_security_type",
          "columns": [
            {
              "expression": "security_type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_dim_security_symbol": {
          "name": "idx_dim_security_symbol",
          "columns": [
            {
              "expression": "symbol",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "authenticated_can_read_securities": {
          "name": "authenticated_can_read_securities",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {
        "check_stock_option": {
          "name": "check_stock_option",
          "value": "\n    (security_type = 'STOCK' AND underlying_symbol = symbol AND option_type IS NULL AND strike_price IS NULL AND expiry_date IS NULL)\n    OR\n    (security_type = 'OPTION' AND underlying_symbol != symbol AND option_type IS NOT NULL AND strike_price IS NOT NULL AND expiry_date IS NOT NULL)\n  "
        }
      },
      "isRLSEnabled": false
    },
    "public.dim_time": {
      "name": "dim_time",
      "schema": "",
      "columns": {
        "time_key": {
          "name": "time_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "time_value": {
          "name": "time_value",
          "type": "varchar(8)",
          "primaryKey": false,
          "notNull": true
        },
        "hour": {
          "name": "hour",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "minute": {
          "name": "minute",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "second": {
          "name": "second",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "hour_minute": {
          "name": "hour_minute",
          "type": "varchar(5)",
          "primaryKey": false,
          "notNull": true
        },
        "period_of_day": {
          "name": "period_of_day",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": false
        },
        "is_market_hours": {
          "name": "is_market_hours",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "quarter_hour": {
          "name": "quarter_hour",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_dim_time_hour": {
          "name": "idx_dim_time_hour",
          "columns": [
            {
              "expression": "hour",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_dim_time_hour_minute": {
          "name": "idx_dim_time_hour_minute",
          "columns": [
            {
              "expression": "hour",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "minute",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_dim_time_time_value": {
          "name": "idx_dim_time_time_value",
          "columns": [
            {
              "expression": "time_value",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "dim_time_time_value_unique": {
          "name": "dim_time_time_value_unique",
          "nullsNotDistinct": false,
          "columns": [
            "time_value"
          ]
        }
      },
      "policies": {
        "authenticated_can_read_times": {
          "name": "authenticated_can_read_times",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_transaction_type": {
      "name": "dim_transaction_type",
      "schema": "",
      "columns": {
        "transaction_type_key": {
          "name": "transaction_type_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "action_code": {
          "name": "action_code",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "action_description": {
          "name": "action_description",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": false
        },
        "action_category": {
          "name": "action_category",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "affects_position": {
          "name": "affects_position",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        },
        "direction": {
          "name": "direction",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "dim_transaction_type_action_code_unique": {
          "name": "dim_transaction_type_action_code_unique",
          "nullsNotDistinct": false,
          "columns": [
            "action_code"
          ]
        }
      },
      "policies": {
        "authenticated_can_read_transaction_types": {
          "name": "authenticated_can_read_transaction_types",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.dim_user": {
      "name": "dim_user",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "auth_user_id": {
          "name": "auth_user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "first_name": {
          "name": "first_name",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "last_name": {
          "name": "last_name",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "email": {
          "name": "email",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true,
          "default": "'basic'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "deleted_at": {
          "name": "deleted_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "idx_dim_user_auth_user_id": {
          "name": "idx_dim_user_auth_user_id",
          "columns": [
            {
              "expression": "auth_user_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "dim_user_auth_user_id_users_id_fk": {
          "name": "dim_user_auth_user_id_users_id_fk",
          "tableFrom": "dim_user",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "auth_user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "dim_user_auth_user_id_unique": {
          "name": "dim_user_auth_user_id_unique",
          "nullsNotDistinct": false,
          "columns": [
            "auth_user_id"
          ]
        },
        "dim_user_email_unique": {
          "name": "dim_user_email_unique",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        }
      },
      "policies": {
        "users_own_data": {
          "name": "users_own_data",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\"dim_user\".\"id\" = current_setting('app.current_user_id')::int"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.fact_stock_prices": {
      "name": "fact_stock_prices",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "symbol": {
          "name": "symbol",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "date_key": {
          "name": "date_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "quarter_hour": {
          "name": "quarter_hour",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "price": {
          "name": "price",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_fact_stock_prices_symbol": {
          "name": "idx_fact_stock_prices_symbol",
          "columns": [
            {
              "expression": "symbol",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_fact_stock_prices_date_time": {
          "name": "idx_fact_stock_prices_date_time",
          "columns": [
            {
              "expression": "date_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "quarter_hour",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_fact_stock_prices_created_at": {
          "name": "idx_fact_stock_prices_created_at",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "fact_stock_prices_date_key_dim_date_date_key_fk": {
          "name": "fact_stock_prices_date_key_dim_date_date_key_fk",
          "tableFrom": "fact_stock_prices",
          "tableTo": "dim_date",
          "columnsFrom": [
            "date_key"
          ],
          "columnsTo": [
            "date_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_symbol_time_cache": {
          "name": "unique_symbol_time_cache",
          "nullsNotDistinct": false,
          "columns": [
            "symbol",
            "date_key",
            "quarter_hour"
          ]
        }
      },
      "policies": {
        "authenticated_can_read_stock_prices": {
          "name": "authenticated_can_read_stock_prices",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.fact_transaction": {
      "name": "fact_transaction",
      "schema": "",
      "columns": {
        "transaction_key": {
          "name": "transaction_key",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "date_key": {
          "name": "date_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "time_key": {
          "name": "time_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "security_key": {
          "name": "security_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "transaction_type_key": {
          "name": "transaction_type_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "broker_key": {
          "name": "broker_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "broker_transaction_id": {
          "name": "broker_transaction_id",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "order_id": {
          "name": "order_id",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "original_transaction_id": {
          "name": "original_transaction_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": true
        },
        "price_per_unit": {
          "name": "price_per_unit",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "gross_amount": {
          "name": "gross_amount",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": true
        },
        "fees": {
          "name": "fees",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "net_amount": {
          "name": "net_amount",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_fact_transaction_date": {
          "name": "idx_fact_transaction_date",
          "columns": [
            {
              "expression": "date_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_fact_transaction_time": {
          "name": "idx_fact_transaction_time",
          "columns": [
            {
              "expression": "time_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_fact_transaction_date_time": {
          "name": "idx_fact_transaction_date_time",
          "columns": [
            {
              "expression": "date_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "time_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_fact_transaction_account": {
          "name": "idx_fact_transaction_account",
          "columns": [
            {
              "expression": "account_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_fact_transaction_security": {
          "name": "idx_fact_transaction_security",
          "columns": [
            {
              "expression": "security_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "fact_transaction_date_key_dim_date_date_key_fk": {
          "name": "fact_transaction_date_key_dim_date_date_key_fk",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_date",
          "columnsFrom": [
            "date_key"
          ],
          "columnsTo": [
            "date_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "fact_transaction_time_key_dim_time_time_key_fk": {
          "name": "fact_transaction_time_key_dim_time_time_key_fk",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_time",
          "columnsFrom": [
            "time_key"
          ],
          "columnsTo": [
            "time_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "fact_transaction_account_key_dim_account_account_key_fk": {
          "name": "fact_transaction_account_key_dim_account_account_key_fk",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_account",
          "columnsFrom": [
            "account_key"
          ],
          "columnsTo": [
            "account_key"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "fact_transaction_security_key_dim_security_security_key_fk": {
          "name": "fact_transaction_security_key_dim_security_security_key_fk",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_security",
          "columnsFrom": [
            "security_key"
          ],
          "columnsTo": [
            "security_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "fact_transaction_transaction_type_key_dim_transaction_type_transaction_type_key_fk": {
          "name": "fact_transaction_transaction_type_key_dim_transaction_type_transaction_type_key_fk",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_transaction_type",
          "columnsFrom": [
            "transaction_type_key"
          ],
          "columnsTo": [
            "transaction_type_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "fact_transaction_broker_key_dim_broker_broker_key_fk": {
          "name": "fact_transaction_broker_key_dim_broker_broker_key_fk",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_broker",
          "columnsFrom": [
            "broker_key"
          ],
          "columnsTo": [
            "broker_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "fk_fact_transaction_security": {
          "name": "fk_fact_transaction_security",
          "tableFrom": "fact_transaction",
          "tableTo": "dim_security",
          "columnsFrom": [
            "security_key"
          ],
          "columnsTo": [
            "security_key"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_account_transaction": {
          "name": "unique_account_transaction",
          "nullsNotDistinct": false,
          "columns": [
            "account_key",
            "broker_transaction_id",
            "original_transaction_id"
          ]
        }
      },
      "policies": {
        "users_own_transactions": {
          "name": "users_own_transactions",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\"fact_transaction\".\"account_key\" IN (\n        SELECT account_key FROM dim_account\n        WHERE user_id = current_setting('app.current_user_id')::int\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.rtm_sync_progress": {
      "name": "rtm_sync_progress",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "progress": {
          "name": "progress",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "total": {
          "name": "total",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "processed": {
          "name": "processed",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "failed": {
          "name": "failed",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "remaining": {
          "name": "remaining",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "start_time": {
          "name": "start_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "end_time": {
          "name": "end_time",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "rtm_sync_progress_account_key_unique": {
          "name": "rtm_sync_progress_account_key_unique",
          "columns": [
            {
              "expression": "account_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "rtm_sync_progress_account_key_dim_account_account_key_fk": {
          "name": "rtm_sync_progress_account_key_dim_account_account_key_fk",
          "tableFrom": "rtm_sync_progress",
          "tableTo": "dim_account",
          "columnsFrom": [
            "account_key"
          ],
          "columnsTo": [
            "account_key"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.stg_transaction": {
      "name": "stg_transaction",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "broker_code": {
          "name": "broker_code",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true
        },
        "broker_transaction_id": {
          "name": "broker_transaction_id",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "raw_data": {
          "name": "raw_data",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": true,
          "default": "'PENDING'"
        },
        "error_message": {
          "name": "error_message",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "broker_timestamp": {
          "name": "broker_timestamp",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true
        },
        "processed_at": {
          "name": "processed_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_stg_transaction_account_status": {
          "name": "idx_stg_transaction_account_status",
          "columns": [
            {
              "expression": "account_key",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "status",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_stg_transaction_broker_id": {
          "name": "idx_stg_transaction_broker_id",
          "columns": [
            {
              "expression": "broker_transaction_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "stg_transaction_account_key_dim_account_account_key_fk": {
          "name": "stg_transaction_account_key_dim_account_account_key_fk",
          "tableFrom": "stg_transaction",
          "tableTo": "dim_account",
          "columnsFrom": [
            "account_key"
          ],
          "columnsTo": [
            "account_key"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_account_broker_transaction": {
          "name": "unique_account_broker_transaction",
          "nullsNotDistinct": false,
          "columns": [
            "account_key",
            "broker_transaction_id",
            "broker_code"
          ]
        }
      },
      "policies": {
        "users_own_staging_transactions": {
          "name": "users_own_staging_transactions",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\"stg_transaction\".\"account_key\" IN (\n        SELECT account_key FROM dim_account\n        WHERE user_id = current_setting('app.current_user_id')::int\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {
    "public.view_current_portfolio_value": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "cash_flows": {
          "name": "cash_flows",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "stock_position_value": {
          "name": "stock_position_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "option_collateral_value": {
          "name": "option_collateral_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "cumulative_transfers": {
          "name": "cumulative_transfers",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "total_portfolio_value": {
          "name": "total_portfolio_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "available_cash": {
          "name": "available_cash",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  SELECT\n    account_key,\n    cash_flows,\n    stock_position_value,\n    option_collateral_value,\n    cumulative_transfers,\n    total_portfolio_value,\n    available_cash\n  FROM \"view_weekly_portfolio_value\"\n  WHERE week_start = (SELECT MAX(week_start) FROM \"view_weekly_portfolio_value\")\n",
      "name": "view_current_portfolio_value",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_current_position": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "symbol": {
          "name": "symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "security_type": {
          "name": "security_type",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": false
        },
        "underlying_symbol": {
          "name": "underlying_symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "avg_cost_per_unit": {
          "name": "avg_cost_per_unit",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "first_transaction_date": {
          "name": "first_transaction_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "last_transaction_date": {
          "name": "last_transaction_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "position_value": {
          "name": "position_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "position_status": {
          "name": "position_status",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "unrealized_pnl": {
          "name": "unrealized_pnl",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "option_type": {
          "name": "option_type",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "strike_price": {
          "name": "strike_price",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  SELECT\n    account_key,\n    symbol,\n    security_type,\n    underlying_symbol,\n    quantity,\n    avg_cost_per_unit,\n    first_transaction_date,\n    last_transaction_date,\n    position_value,\n    position_status,\n    unrealized_pnl,\n    option_type,\n    expiry_date,\n    strike_price\n  FROM \"view_weekly_position\"\n  WHERE week_start = (SELECT MAX(week_start) FROM \"view_weekly_position\")\n",
      "name": "view_current_position",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_daily_activity": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "date": {
          "name": "date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "trade_count": {
          "name": "trade_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "daily_premium": {
          "name": "daily_premium",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "daily_return_percent": {
          "name": "daily_return_percent",
          "type": "numeric(10, 4)",
          "primaryKey": false,
          "notNull": false
        },
        "expiring_contracts": {
          "name": "expiring_contracts",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "expiring_symbols": {
          "name": "expiring_symbols",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_current_date": {
          "name": "is_current_date",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  WITH expiry_range AS (\n    -- Find the furthest expiry date to determine our window\n    SELECT\n        a.account_key,\n        COALESCE(MAX(s.expiry_date), CURRENT_DATE) as max_expiry_date\n    FROM \"dim_account\" a\n    LEFT JOIN \"view_current_position\" vp ON a.account_key = vp.account_key\n    LEFT JOIN \"dim_security\" s ON s.symbol = vp.symbol AND s.expiry_date IS NOT NULL AND s.expiry_date >= CURRENT_DATE AND ABS(CAST(vp.quantity AS DECIMAL)) > 0\n    WHERE a.is_active = true\n    GROUP BY a.account_key\n  ),\n  all_weekdays AS (\n    SELECT d.full_date, er.account_key\n    FROM \"dim_date\" d, expiry_range er\n    WHERE d.full_date >= CURRENT_DATE - INTERVAL '6 months'\n      AND d.full_date <= er.max_expiry_date\n      AND EXTRACT(dow FROM d.full_date) BETWEEN 1 AND 5\n  ),\n  daily_data AS (\n    SELECT\n        d.full_date,\n        d.week_starting_date,\n        a.account_key,\n        SUM(CASE WHEN tt.action_category = 'TRANSFER' THEN ft.net_amount ELSE 0 END) as daily_transfers,\n        -- Exclude stock transactions from daily gains since they're balanced by position value\n        SUM(CASE\n            WHEN tt.action_category NOT IN ('TRANSFER') AND ds.security_type != 'STOCK'\n            THEN ft.net_amount\n            ELSE 0\n        END) as daily_gains,\n        COUNT(CASE WHEN tt.action_category = 'TRADE' THEN ft.transaction_key END) as trade_count\n    FROM \"fact_transaction\" ft\n    JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    JOIN \"dim_account\" a ON ft.account_key = a.account_key\n    JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    JOIN \"dim_security\" ds ON ft.security_key = ds.security_key\n    WHERE d.full_date <= CURRENT_DATE\n      AND d.full_date >= CURRENT_DATE - INTERVAL '6 months'\n      AND EXTRACT(dow FROM d.full_date) BETWEEN 1 AND 5\n    GROUP BY a.account_key, d.full_date, d.week_starting_date\n  ),\n  -- Get weekly portfolio values using corrected stock position handling\n  weekly_portfolio_data AS (\n    SELECT\n        account_key,\n        week_start,\n        total_portfolio_value,\n        LAG(total_portfolio_value) OVER (PARTITION BY account_key ORDER BY week_start) as previous_week_portfolio_value\n    FROM \"view_weekly_portfolio_value\"\n    WHERE week_start >= (CURRENT_DATE - INTERVAL '6 months')::date\n  ),\n  daily_returns AS (\n    SELECT\n        dd.account_key,\n        dd.full_date,\n        dd.trade_count,\n        dd.daily_gains as daily_premium,\n        -- Use weekly portfolio values for percentage calculation\n        CASE\n            WHEN wpd.previous_week_portfolio_value IS NOT NULL AND wpd.previous_week_portfolio_value != 0\n            THEN ROUND((dd.daily_gains / ABS(wpd.previous_week_portfolio_value)) * 100, 2)\n            ELSE 0\n        END as daily_return_percent\n    FROM daily_data dd\n    LEFT JOIN weekly_portfolio_data wpd ON dd.account_key = wpd.account_key\n      AND dd.week_starting_date = wpd.week_start\n  ),\n  daily_expiries AS (\n    SELECT\n        s.expiry_date as full_date,\n        vp.account_key,\n        COUNT(*) as expiring_contracts,\n        STRING_AGG(DISTINCT s.underlying_symbol, ', ') as expiring_symbols\n    FROM \"view_current_position\" vp\n    JOIN \"dim_security\" s ON s.symbol = vp.symbol\n    WHERE s.expiry_date IS NOT NULL\n      AND s.expiry_date >= CURRENT_DATE\n      AND ABS(CAST(vp.quantity AS DECIMAL)) > 0\n      AND EXTRACT(dow FROM s.expiry_date) BETWEEN 1 AND 5\n    GROUP BY s.expiry_date, vp.account_key\n  )\n  SELECT\n      wd.account_key,\n      wd.full_date as date,\n      COALESCE(dr.trade_count, 0) as trade_count,\n      COALESCE(dr.daily_premium, 0) as daily_premium,\n      COALESCE(dr.daily_return_percent, 0) as daily_return_percent,\n      COALESCE(de.expiring_contracts, 0) as expiring_contracts,\n      de.expiring_symbols,\n      (wd.full_date = CURRENT_DATE) as is_current_date\n  FROM all_weekdays wd\n  LEFT JOIN daily_returns dr ON wd.full_date = dr.full_date AND wd.account_key = dr.account_key\n  LEFT JOIN daily_expiries de ON wd.full_date = de.full_date AND wd.account_key = de.account_key\n  ORDER BY wd.account_key, date DESC\n",
      "name": "view_daily_activity",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_portfolio_distribution": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "symbol": {
          "name": "symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "position_value": {
          "name": "position_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "instrument_count": {
          "name": "instrument_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "portfolio_percentage": {
          "name": "portfolio_percentage",
          "type": "numeric(10, 4)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  SELECT\n    account_key,\n    underlying_symbol as symbol,\n    SUM(position_value) as position_value,\n    COUNT(*)::integer as instrument_count,\n    (ABS(SUM(position_value)) / SUM(ABS(SUM(position_value))) OVER (PARTITION BY account_key)) * 100 as portfolio_percentage\n\n  FROM \"view_current_position\"\n  WHERE position_status = 'OPEN'\n  GROUP BY account_key, underlying_symbol\n  ORDER BY ABS(SUM(position_value)) DESC\n",
      "name": "view_portfolio_distribution",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_portfolio_summary": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "portfolio_value": {
          "name": "portfolio_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "cash_balance": {
          "name": "cash_balance",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "available_cash": {
          "name": "available_cash",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "stock_position_value": {
          "name": "stock_position_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "option_collateral_value": {
          "name": "option_collateral_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "monthly_pnl": {
          "name": "monthly_pnl",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "yearly_pnl": {
          "name": "yearly_pnl",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "monthly_pnl_percent": {
          "name": "monthly_pnl_percent",
          "type": "numeric(10, 4)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "yearly_pnl_percent": {
          "name": "yearly_pnl_percent",
          "type": "numeric(10, 4)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        },
        "overall_percent_increase": {
          "name": "overall_percent_increase",
          "type": "numeric(10, 4)",
          "primaryKey": false,
          "notNull": false,
          "default": "'0'"
        }
      },
      "definition": "\n  WITH realised_monthly_pnl AS (\n    -- Realised P/L for current month including stock position adjustments\n    -- Note: Stock purchases show as negative cash flow but create equivalent asset value\n    -- This calculation accounts for both to show true realized P&L from trading\n    SELECT\n      a.account_key,\n      -- Raw cash flows from trades and income this month\n      SUM(ft.net_amount) + COALESCE(\n        -- Add back stock position values for trades that happened this month\n        -- This prevents stock purchases from appearing as \"losses\" in P&L\n        (SELECT SUM(vwp.position_value)\n         FROM \"view_weekly_position\" vwp\n         WHERE vwp.account_key = a.account_key\n         AND vwp.position_status = 'OPEN'\n         AND vwp.security_type = 'STOCK'\n         AND DATE_TRUNC('month', vwp.first_transaction_date) = DATE_TRUNC('month', CURRENT_DATE)\n         AND vwp.week_start = (SELECT MAX(week_start) FROM \"view_weekly_position\" WHERE account_key = a.account_key)), 0\n      ) as monthly_realised_pnl\n    FROM \"fact_transaction\" ft\n    JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    JOIN \"dim_account\" a ON ft.account_key = a.account_key\n    JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    WHERE\n      tt.action_category IN ('TRADE', 'INCOME')\n      AND d.year = EXTRACT(YEAR FROM CURRENT_DATE)\n      AND d.month_number = EXTRACT(MONTH FROM CURRENT_DATE)\n    GROUP BY a.account_key\n  ),\n\n  realised_yearly_pnl AS (\n    -- Realised P/L for current year including stock position adjustments\n    -- Note: Stock purchases show as negative cash flow but create equivalent asset value\n    -- This calculation accounts for both to show true realized P&L from trading\n    SELECT\n      a.account_key,\n      -- Raw cash flows from trades and income this year\n      SUM(ft.net_amount) + COALESCE(\n        -- Add back stock position values for trades that happened this year\n        -- This prevents stock purchases from appearing as \"losses\" in P&L\n        (SELECT SUM(vwp.position_value)\n         FROM \"view_weekly_position\" vwp\n         WHERE vwp.account_key = a.account_key\n         AND vwp.position_status = 'OPEN'\n         AND vwp.security_type = 'STOCK'\n         AND EXTRACT(YEAR FROM vwp.first_transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE)\n         AND vwp.week_start = (SELECT MAX(week_start) FROM \"view_weekly_position\" WHERE account_key = a.account_key)), 0\n      ) as yearly_realised_pnl\n    FROM \"fact_transaction\" ft\n    JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    JOIN \"dim_account\" a ON ft.account_key = a.account_key\n    JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    WHERE\n      tt.action_category IN ('TRADE', 'INCOME')\n      AND d.year = EXTRACT(YEAR FROM CURRENT_DATE)\n    GROUP BY a.account_key\n  ),\n\n  total_transfers_calc AS (\n    -- Calculate total transfers (money deposited/withdrawn)\n    SELECT\n      a.account_key,\n      SUM(ft.net_amount) as total_transfers\n    FROM \"fact_transaction\" ft\n    JOIN \"dim_account\" a ON ft.account_key = a.account_key\n    JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    WHERE\n      tt.action_category = 'TRANSFER'\n    GROUP BY a.account_key\n  ),\n\n  portfolio_value_start_of_month AS (\n    -- Calculate portfolio value at start of month using viewWeeklyPortfolioValue\n    SELECT\n      wpv.account_key,\n      wpv.total_portfolio_value as portfolio_value_start_month\n    FROM \"view_weekly_portfolio_value\" wpv\n    WHERE wpv.week_start = (\n      SELECT MAX(week_start)\n      FROM \"view_weekly_portfolio_value\" wpv2\n      WHERE wpv2.account_key = wpv.account_key\n      AND wpv2.week_start < DATE_TRUNC('month', CURRENT_DATE)\n    )\n  ),\n\n  portfolio_value_start_of_year AS (\n    -- Calculate portfolio value at start of year using viewWeeklyPortfolioValue\n    SELECT\n      wpv.account_key,\n      wpv.total_portfolio_value as portfolio_value_start_year\n    FROM \"view_weekly_portfolio_value\" wpv\n    WHERE wpv.week_start = (\n      SELECT MAX(week_start)\n      FROM \"view_weekly_portfolio_value\" wpv2\n      WHERE wpv2.account_key = wpv.account_key\n      AND wpv2.week_start < DATE_TRUNC('year', CURRENT_DATE)\n    )\n  )\n\n  -- Final summary query using viewWeeklyPortfolioValue\n  SELECT\n    a.account_key,\n    COALESCE(pv.total_portfolio_value, 0) as portfolio_value,\n    COALESCE(pv.cash_flows, 0) as cash_balance,\n    COALESCE(pv.available_cash, 0) as available_cash,\n    COALESCE(pv.stock_position_value, 0) as stock_position_value,\n    COALESCE(pv.option_collateral_value, 0) as option_collateral_value,\n    COALESCE(mp.monthly_realised_pnl, 0) as monthly_pnl,\n    COALESCE(yp.yearly_realised_pnl, 0) as yearly_pnl,\n\n    -- Calculate percentage changes based on realized P&L vs portfolio value\n    CASE\n      WHEN COALESCE(pvsm.portfolio_value_start_month, 0) > 0\n      THEN (COALESCE(mp.monthly_realised_pnl, 0) / pvsm.portfolio_value_start_month * 100)\n      WHEN COALESCE(pv.cumulative_transfers, 0) > 0\n      THEN ((COALESCE(pv.total_portfolio_value, 0) - COALESCE(pv.cumulative_transfers, 0)) / pv.cumulative_transfers * 100)\n      ELSE 0\n    END as monthly_pnl_percent,\n\n    CASE\n      WHEN COALESCE(pvsy.portfolio_value_start_year, 0) > 0\n      THEN (COALESCE(yp.yearly_realised_pnl, 0) / pvsy.portfolio_value_start_year * 100)\n      WHEN COALESCE(pv.cumulative_transfers, 0) > 0\n      THEN ((COALESCE(pv.total_portfolio_value, 0) - COALESCE(pv.cumulative_transfers, 0)) / pv.cumulative_transfers * 100)\n      ELSE 0\n    END as yearly_pnl_percent,\n\n    CASE\n      WHEN COALESCE(pv.cumulative_transfers, 0) > 0\n      THEN ((COALESCE(pv.total_portfolio_value, 0) - COALESCE(pv.cumulative_transfers, 0)) / pv.cumulative_transfers * 100)\n      ELSE 0\n    END as overall_percent_increase\n\n  FROM \"dim_account\" a\n  LEFT JOIN \"view_current_portfolio_value\" pv ON a.account_key = pv.account_key\n  LEFT JOIN realised_monthly_pnl mp ON a.account_key = mp.account_key\n  LEFT JOIN realised_yearly_pnl yp ON a.account_key = yp.account_key\n  LEFT JOIN total_transfers_calc tt ON a.account_key = tt.account_key\n  LEFT JOIN portfolio_value_start_of_month pvsm ON a.account_key = pvsm.account_key\n  LEFT JOIN portfolio_value_start_of_year pvsy ON a.account_key = pvsy.account_key\n  WHERE a.is_active = true\n",
      "name": "view_portfolio_summary",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_profit_distribution": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "underlying_symbol": {
          "name": "underlying_symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "total_profit": {
          "name": "total_profit",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "trade_count": {
          "name": "trade_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  SELECT\n    a.account_key,\n    s.underlying_symbol,\n    SUM(ft.net_amount) as total_profit,\n    COUNT(*)::integer as trade_count\n  FROM \"fact_transaction\" ft\n  JOIN \"dim_security\" s ON ft.security_key = s.security_key\n  JOIN \"dim_account\" a ON ft.account_key = a.account_key\n  JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n  WHERE tt.action_category = 'TRADE'\n  GROUP BY a.account_key, s.underlying_symbol\n  HAVING SUM(ft.net_amount) != 0\n  ORDER BY SUM(ft.net_amount) DESC\n",
      "name": "view_profit_distribution",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_weekly_portfolio_value": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "week_start": {
          "name": "week_start",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "cash_flows": {
          "name": "cash_flows",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "stock_position_value": {
          "name": "stock_position_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "option_collateral_value": {
          "name": "option_collateral_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "cumulative_transfers": {
          "name": "cumulative_transfers",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "total_portfolio_value": {
          "name": "total_portfolio_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "available_cash": {
          "name": "available_cash",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  WITH weekly_date_series AS (\n    -- Generate all weeks from earliest transaction to current date\n    SELECT DISTINCT\n      week_start,\n      account_key\n    FROM \"view_weekly_position\"\n  ),\n\n  weekly_cash_flows AS (\n    -- Calculate cumulative cash flows up to each week\n    SELECT\n      wds.account_key,\n      wds.week_start,\n      COALESCE(SUM(ft.net_amount), 0) as cash_flows_to_date\n    FROM weekly_date_series wds\n    LEFT JOIN \"fact_transaction\" ft ON ft.account_key = wds.account_key\n    LEFT JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    WHERE d.week_starting_date <= wds.week_start OR ft.transaction_key IS NULL\n    GROUP BY wds.account_key, wds.week_start\n  ),\n\n  weekly_transfers AS (\n    -- Calculate cumulative transfers up to each week\n    SELECT\n      wds.account_key,\n      wds.week_start,\n      COALESCE(SUM(\n        CASE WHEN tt.action_category = 'TRANSFER'\n        THEN ft.net_amount\n        ELSE 0 END\n      ), 0) as cumulative_transfers\n    FROM weekly_date_series wds\n    LEFT JOIN \"fact_transaction\" ft ON ft.account_key = wds.account_key\n    LEFT JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    LEFT JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    WHERE d.week_starting_date <= wds.week_start OR ft.transaction_key IS NULL\n    GROUP BY wds.account_key, wds.week_start\n  )\n\n  SELECT\n    wcf.account_key,\n    wcf.week_start,\n    wcf.cash_flows_to_date as cash_flows,\n\n    -- Stock position values from weekly positions (use premium cost basis)\n    COALESCE(\n      (SELECT SUM(vwp.position_value)\n       FROM \"view_weekly_position\" vwp\n       WHERE vwp.account_key = wcf.account_key\n       AND vwp.week_start = wcf.week_start\n       AND vwp.security_type = 'STOCK'\n       AND vwp.position_status = 'OPEN'), 0\n    ) as stock_position_value,\n\n    -- Option collateral values using strike_price * 100 (matching viewPosition logic)\n    COALESCE(\n      (SELECT SUM(ds.strike_price * ABS(vwp.quantity) * 100)\n       FROM \"view_weekly_position\" vwp\n       JOIN \"dim_security\" ds ON vwp.symbol = ds.symbol\n       WHERE vwp.account_key = wcf.account_key\n       AND vwp.week_start = wcf.week_start\n       AND vwp.security_type = 'OPTION'\n       AND vwp.position_status = 'OPEN'), 0\n    ) as option_collateral_value,\n\n    -- Cumulative transfers\n    wt.cumulative_transfers,\n\n    -- Total portfolio value = cash flows + stock position values\n    wcf.cash_flows_to_date + COALESCE(\n      (SELECT SUM(vwp.position_value)\n       FROM \"view_weekly_position\" vwp\n       WHERE vwp.account_key = wcf.account_key\n       AND vwp.week_start = wcf.week_start\n       AND vwp.security_type = 'STOCK'\n       AND vwp.position_status = 'OPEN'), 0\n    ) as total_portfolio_value,\n\n    -- Available cash = cash flows - option collateral\n    wcf.cash_flows_to_date - COALESCE(\n      (SELECT SUM(ds.strike_price * ABS(vwp.quantity) * 100)\n       FROM \"view_weekly_position\" vwp\n       JOIN \"dim_security\" ds ON vwp.symbol = ds.symbol\n       WHERE vwp.account_key = wcf.account_key\n       AND vwp.week_start = wcf.week_start\n       AND vwp.security_type = 'OPTION'\n       AND vwp.position_status = 'OPEN'), 0\n    ) as available_cash\n\n  FROM weekly_cash_flows wcf\n  JOIN weekly_transfers wt ON wcf.account_key = wt.account_key\n    AND wcf.week_start = wt.week_start\n  ORDER BY wcf.account_key, wcf.week_start\n",
      "name": "view_weekly_portfolio_value",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_weekly_position": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "week_start": {
          "name": "week_start",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "symbol": {
          "name": "symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "security_type": {
          "name": "security_type",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": false
        },
        "underlying_symbol": {
          "name": "underlying_symbol",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "quantity": {
          "name": "quantity",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "avg_cost_per_unit": {
          "name": "avg_cost_per_unit",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "first_transaction_date": {
          "name": "first_transaction_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "last_transaction_date": {
          "name": "last_transaction_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "position_value": {
          "name": "position_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "position_status": {
          "name": "position_status",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "unrealized_pnl": {
          "name": "unrealized_pnl",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "expiry_date": {
          "name": "expiry_date",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "option_type": {
          "name": "option_type",
          "type": "varchar(10)",
          "primaryKey": false,
          "notNull": false
        },
        "strike_price": {
          "name": "strike_price",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  WITH weekly_date_series AS (\n    -- Get all unique weeks where transactions occurred\n    SELECT DISTINCT\n      d.week_starting_date as week_start,\n      ft.account_key\n    FROM \"fact_transaction\" ft\n    JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    JOIN \"dim_account\" a ON ft.account_key = a.account_key\n    WHERE a.is_active = true\n  ),\n\n  position_calculations AS (\n    SELECT\n      wds.account_key,\n      wds.week_start,\n      ds.symbol,\n      ds.security_type,\n      ds.underlying_symbol,\n\n      -- Sum all transactions for this symbol up to and including this week\n      SUM(ft.quantity) as cumulative_quantity,\n      SUM(ABS(ft.net_amount)) as total_cost,\n      SUM(ABS(ft.quantity)) as total_quantity,\n\n      -- Calculate average cost per unit\n      CASE\n        WHEN SUM(ABS(ft.quantity)) > 0\n        THEN SUM(ABS(ft.net_amount)) / SUM(ABS(ft.quantity))\n        ELSE 0\n      END as avg_cost_per_unit,\n\n      MIN(d.full_date) as first_transaction_date,\n      MAX(d.full_date) as last_transaction_date\n\n    FROM weekly_date_series wds\n    JOIN \"fact_transaction\" ft ON ft.account_key = wds.account_key\n    JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    JOIN \"dim_security\" ds ON ft.security_key = ds.security_key\n    JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    WHERE d.week_starting_date <= wds.week_start  -- Only transactions up to this week\n    AND tt.action_category IN ('TRADE', 'CORPORATE')\n    GROUP BY wds.account_key, wds.week_start, ds.symbol, ds.security_type, ds.underlying_symbol\n    HAVING SUM(ft.quantity) != 0  -- Only positions that are open\n  )\n\n  SELECT\n    pc.account_key,\n    pc.week_start,\n    pc.symbol,\n    pc.security_type,\n    pc.underlying_symbol,\n    pc.cumulative_quantity as quantity,\n    pc.avg_cost_per_unit,\n    pc.first_transaction_date,\n    pc.last_transaction_date,\n\n    -- Position value: stocks use cost basis, options use collateral value\n    CASE\n      WHEN ds.security_type = 'STOCK' THEN ABS(pc.cumulative_quantity) * pc.avg_cost_per_unit\n      WHEN ds.security_type = 'OPTION' THEN ABS(pc.cumulative_quantity) * ds.strike_price * 100\n      ELSE ABS(pc.cumulative_quantity) * pc.avg_cost_per_unit\n    END as position_value,\n\n    'OPEN' as position_status,\n    0 as unrealized_pnl,\n    ds.expiry_date,\n    ds.option_type,\n    ds.strike_price\n\n  FROM position_calculations pc\n  LEFT JOIN \"dim_security\" ds ON pc.symbol = ds.symbol\n  ORDER BY pc.account_key, pc.week_start, pc.symbol\n",
      "name": "view_weekly_position",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    },
    "public.view_weekly_return": {
      "columns": {
        "account_key": {
          "name": "account_key",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "week_start": {
          "name": "week_start",
          "type": "date",
          "primaryKey": false,
          "notNull": false
        },
        "cumulative_portfolio_value": {
          "name": "cumulative_portfolio_value",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "cumulative_transfers": {
          "name": "cumulative_transfers",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        },
        "weekly_return_percent": {
          "name": "weekly_return_percent",
          "type": "numeric(10, 4)",
          "primaryKey": false,
          "notNull": false
        },
        "weekly_return_absolute": {
          "name": "weekly_return_absolute",
          "type": "numeric(18, 8)",
          "primaryKey": false,
          "notNull": false
        }
      },
      "definition": "\n  WITH weekly_transfers AS (\n    -- Calculate weekly transfers separately for returns calculation\n    SELECT\n      a.account_key,\n      d.week_starting_date as week_start,\n      SUM(CASE WHEN tt.action_category = 'TRANSFER' THEN ft.net_amount ELSE 0 END) as weekly_transfers,\n      SUM(CASE WHEN tt.action_category != 'TRANSFER' THEN ft.net_amount ELSE 0 END) as weekly_gains\n    FROM \"fact_transaction\" ft\n    JOIN \"dim_date\" d ON ft.date_key = d.date_key\n    JOIN \"dim_account\" a ON ft.account_key = a.account_key\n    JOIN \"dim_transaction_type\" tt ON ft.transaction_type_key = tt.transaction_type_key\n    WHERE d.full_date <= CURRENT_DATE\n    GROUP BY a.account_key, d.week_starting_date\n  ),\n\n  portfolio_with_transfers AS (\n    -- Combine portfolio values with transfer data\n    SELECT\n      wpv.account_key,\n      wpv.week_start,\n      wpv.total_portfolio_value as cumulative_portfolio_value,\n      wpv.cumulative_transfers,\n      COALESCE(wt.weekly_transfers, 0) as weekly_transfers,\n      COALESCE(wt.weekly_gains, 0) as weekly_gains\n    FROM \"view_weekly_portfolio_value\" wpv\n    LEFT JOIN weekly_transfers wt ON wpv.account_key = wt.account_key\n      AND wpv.week_start = wt.week_start\n  ),\n\n  returns_calculation AS (\n    SELECT\n      account_key,\n      week_start,\n      cumulative_portfolio_value,\n      cumulative_transfers,\n      weekly_transfers,\n      weekly_gains as weekly_return_absolute,\n      -- LAG calculation for previous week's portfolio value\n      LAG(cumulative_portfolio_value, 1) OVER (\n        PARTITION BY account_key\n        ORDER BY week_start\n      ) as prev_week_portfolio_value\n    FROM portfolio_with_transfers\n  )\n\n  SELECT\n    account_key,\n    week_start,\n    cumulative_portfolio_value,\n    cumulative_transfers,\n    weekly_return_absolute,\n    -- Weekly return calculation: handle first week properly\n    CASE\n      WHEN prev_week_portfolio_value > 0 THEN\n        -- Normal case: previous week portfolio value exists\n        ((cumulative_portfolio_value - weekly_transfers - prev_week_portfolio_value)\n          / prev_week_portfolio_value) * 100\n      WHEN prev_week_portfolio_value IS NULL AND cumulative_transfers > 0 THEN\n        -- First week case: use weekly gains relative to transfers\n        (weekly_return_absolute / cumulative_transfers) * 100\n      ELSE NULL\n    END as weekly_return_percent\n  FROM returns_calculation\n  ORDER BY account_key, week_start\n",
      "name": "view_weekly_return",
      "schema": "public",
      "isExisting": false,
      "with": {
        "securityInvoker": true
      },
      "materialized": false
    }
  },
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}